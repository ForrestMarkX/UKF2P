class KFPlayerControllerOriginal extends Object;

reliable client function ClientTriggerWeaponContentLoad(class<KFWeapon> WeaponClass);
event PreClientTravel( string PendingURL, ETravelType TravelType, bool bIsSeamlessTravel );
function RecieveChatMessage(PlayerReplicationInfo PRI, string ChatMessage, name Type, optional float MsgLifeTime);
reliable client event TeamMessage(PlayerReplicationInfo PRI, coerce string S, name Type, optional float MsgLifeTime);
reliable client event ReceiveLocalizedMessage( class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject );
reliable final server function MixerGiveAmmo(string ControlId, string TransactionId, int Amount, int Cooldown, optional string Username);
reliable final server function MixerGiveArmor(string ControlId, string TransactionId, int Amount, int Cooldown, string Username);
reliable final server function MixerGiveDosh(string ControlId, string TransactionId, int Amount, int Cooldown, string Username);
reliable final server function MixerGiveGrenades(string ControlId, string TransactionId, int Amount, int Cooldown, string Username);
reliable final server function MixerHealUser(string ControlId, string TransactionId, int Amount, int Cooldown, string Username);
reliable final server function MixerCauseZedTime(string ControlId, string TransactionId, int Amount, int Cooldown, string Username);
reliable final server function MixerEnrageZeds(string ControlId, string TransactionId, int Radius, int Cooldown, string Username);
simulated final function MixerPukeUser(string ControlId, string TransactionId, float PukeLength, int Cooldown, string UserName);
reliable final server function MixerSpawnZed(string ControlId, string TransactionId, string ZedClass, int Amount, int Cooldown, string UserName);
reliable server function SkipLobby();
reliable server function ServerSetEnablePurchases(bool bEnalbe);
function EnterZedTime();
function CompleteZedTime();
simulated function bool GetAllowSeasonalSkins();
simulated event name GetSeasonalStateName();
reliable server function ServerPause();
reliable client function ClientWonGame( string MapName, byte Difficulty, byte GameLength, byte bCoop );
reliable client function ClientGameOver(string MapName, byte Difficulty, byte GameLength, byte bCoop, byte FinalWaveNum);
reliable final client event OnWaveComplete(int CurrentWave);
reliable client event OnAllMapCollectiblesFound(string MapName);
simulated function bool SeasonalEventIsValid();
function GetSeasonalEventStatInfo(int StatIdx, out int CurrentValue, out int MaxValue);
function bool IsEventObjectiveComplete(int Index);